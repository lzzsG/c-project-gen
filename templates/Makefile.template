# 通用 Makefile

# 默认编译器和编译选项
# CC: 设置编译器
CC = gcc

# CFLAGS: 编译时的选项
# -Wall: 打开所有常见的编译警告
# -Wextra: 打开额外的警告信息
# -O2: 打开优化选项，适用于一般情况
# -I/opt/homebrew/include: 适用于 macOS 用户，指定 Homebrew 安装的头文件路径
# -Iinclude: 指定项目本地的头文件目录
# 
# 检测操作系统
UNAME_S := $(shell uname -s)

# 根据操作系统设置编译选项和链接选项
ifeq ($(UNAME_S), Darwin)
    # macOS 用户
    CFLAGS = -Wall -Wextra -O2 -I/opt/homebrew/include -Iinclude
    LDFLAGS = -L/opt/homebrew/lib -lcunit
    DEBUGGER = lldb  # macOS 使用 lldb
else ifeq ($(UNAME_S), Linux)
    # Linux 用户
    CFLAGS = -Wall -Wextra -O2 -Iinclude
    LDFLAGS = -lcunit
    DEBUGGER = gdb  # Linux 使用 gdb
else
    # Windows 用户：建议使用 WSL2
    $(error Unsupported platform detected. Please use WSL2 for Windows.)
endif

# 项目信息
TARGET = $(notdir $(CURDIR))  # 项目名默认为当前目录名
SRC_DIR = src
OBJ_DIR = obj
BIN_DIR = bin
INCLUDE_DIR = include
TEST_DIR = tests

# 查找源代码和对象文件
SRCS := $(wildcard $(SRC_DIR)/*.c)
OBJS := $(filter-out $(OBJ_DIR)/main.o, $(patsubst $(SRC_DIR)/%.c, $(OBJ_DIR)/%.o, $(SRCS)))

# 测试文件
TEST_FILE := $(TEST_DIR)/test.c
TEST_OBJS := $(OBJ_DIR)/test.o
TEST_BIN = $(BIN_DIR)/test_suite

# Debug 编译选项：为 gdb 启用调试信息 (-g) 并关闭优化 (-O0)
DEBUG_CFLAGS = -Wall -Wextra -g -O0 -Iinclude

# 创建编译输出目录
$(OBJ_DIR) $(BIN_DIR):
	mkdir -p $@

# 默认目标：帮助信息
.PHONY: help
help:
	@echo "Usage:"
	@echo "  make new PROJECT=new_project_name # 创建一个包含模板文件的 C 项目"
	@echo "  make build                        # 编译项目"
	@echo "  make run                          # 编译并运行项目"
	@echo "  make build_test                   # 编译测试套件"
	@echo "  make test                         # 运行测试"
	@echo "  make clean                        # 清理生成的文件"
	@echo "  make check                        # 只检查语法"
	@echo "  make debug                        # 调试项目"


# 编译源程序
.PHONY: build
build: $(BIN_DIR)/$(TARGET)

$(BIN_DIR)/$(TARGET): $(OBJS) $(OBJ_DIR)/main.o | $(BIN_DIR)
	$(CC) $(CFLAGS) $(OBJS) $(OBJ_DIR)/main.o -o $@ $(LDFLAGS)

# 编译每个源文件为 .o 文件
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c | $(OBJ_DIR)
	$(CC) $(CFLAGS) -I$(INCLUDE_DIR) -c $< -o $@

# 编译并运行源程序
.PHONY: run
run: build
	@./$(BIN_DIR)/$(TARGET)

# 编译测试程序，不包含 main.o
.PHONY: build_test
build_test: $(TEST_BIN)

# 编译测试程序：不链接 main.o，防止重复定义 main 函数
$(TEST_BIN): $(TEST_OBJS) $(OBJS) | $(BIN_DIR)
	$(CC) $(CFLAGS) $(TEST_OBJS) $(OBJS) -o $@ $(LDFLAGS)

# 编译测试文件为 .o 文件
$(OBJ_DIR)/test.o: $(TEST_FILE) | $(OBJ_DIR)
	$(CC) $(CFLAGS) -I$(INCLUDE_DIR) -c $< -o $@

# 测试目标
.PHONY: test
test: build_test
	@echo "Running tests..."
	@./$(TEST_BIN)

# 只检查语法，不生成目标文件，类似 `cargo check`
.PHONY: check
check:
	@echo "Checking syntax..."
	$(CC) $(CFLAGS) -fsyntax-only $(SRCS)
	@echo "Syntax check passed!"

# 调试模式：为源程序生成调试符号并使用 gdb 或 lldb
.PHONY: debug
debug: $(OBJ_DIR) $(BIN_DIR)
	$(CC) $(DEBUG_CFLAGS) $(SRCS) -o $(BIN_DIR)/$(TARGET) $(LDFLAGS)
	$(DEBUGGER) $(BIN_DIR)/$(TARGET)

# 清理目标
.PHONY: clean
clean:
	rm -rf $(OBJ_DIR) $(BIN_DIR)


# make doc later