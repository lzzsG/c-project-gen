#ifndef USER_TEST_FUNCTIONS_H
#define USER_TEST_FUNCTIONS_H

#include <CUnit/CUnit.h>

/* 
 * 测试函数编写说明：
 * 
 * 1. 每个测试函数应按照 CUnit 的格式编写，函数名可以自定义。
 * 2. 使用 CU_ASSERT 来判断测试条件，CU_ASSERT 宏接受一个条件表达式，如果表达式为真，测试通过，否则失败。
 * 
 * 例子：
 * 假设你有一个 Fibonacci 函数，可以按照以下方式编写测试：
 *
 * #include "fibonacci.h"  // 包含 Fibonacci 函数的头文件
 *
 * void test_fibonacci_recursive(void) {
 *     CU_ASSERT(fibonacci_recursive(0) == 0);
 *     CU_ASSERT(fibonacci_recursive(1) == 1);
 *     CU_ASSERT(fibonacci_recursive(2) == 1);
 *     CU_ASSERT(fibonacci_recursive(10) == 55);  // 测试 Fibonacci(10)
 * }
 *
 * void test_fibonacci_iterative(void) {
 *     CU_ASSERT(fibonacci_iterative(0) == 0);
 *     CU_ASSERT(fibonacci_iterative(1) == 1);
 *     CU_ASSERT(fibonacci_iterative(2) == 1);
 *     CU_ASSERT(fibonacci_iterative(10) == 55);  // 测试 Fibonacci(10)
 * }
 * 
 * 你可以根据需要定义多个测试函数，并确保在模板中正确添加它们。
 * 
 * 下面是一个简单的 "Hello World" 测试函数：
 */

/* 测试 Hello World 输出的简单函数 */
void test_hello_world(void) {
    CU_ASSERT_STRING_EQUAL("Hello", "Hello");
    CU_ASSERT(1 == 1);
}

#endif /* USER_TEST_FUNCTIONS_H */
