#include <criterion/criterion.h>
#include "../include/fibonacci.h" // 包含 Fibonacci 函数的头文件

/**
 * 这是一个使用 Criterion 框架进行单元测试的模板文件。
 * Criterion 框架能够自动发现并运行所有测试函数。
 * 你可以按照以下步骤为不同的功能编写测试：
 *
 * 1. 在 `include/` 文件夹中添加一个新的头文件，声明你要测试的函数，例如 `fibonacci.h`。
 * 2. 在 `src/` 文件夹中实现你的功能代码，如 `fibonacci.c`。
 * 3. 在 `tests/test.c` 中引入需要测试的头文件，例如 `#include "../include/fibonacci.h"`。
 * 4. 使用 `Test()` 宏定义你的测试函数。例如：`Test(FibonacciSuite, test_fibonacci_recursive)`。
 * 5. 每次运行 `make test` 时，Criterion 会自动检测并运行所有测试函数。`make test VB=1`启用 verbose 模式运行测试。
 *
 * 你可以参考本文件编写你自己的测试代码，Criterion 会自动处理所有的测试流程。
 */

/* 测试 Fibonacci 递归实现 */
Test(FibonacciSuite, test_fibonacci_recursive)
{
    cr_assert_eq(fibonacci_recursive(0), 0, "Expected: %d, but got: %d", 0, fibonacci_recursive(0));
    cr_assert_eq(fibonacci_recursive(1), 1, "Expected: %d, but got: %d", 1, fibonacci_recursive(1));
    cr_assert_eq(fibonacci_recursive(2), 1, "Expected: %d, but got: %d", 1, fibonacci_recursive(2));
    cr_assert_eq(fibonacci_recursive(10), 55, "Expected: %d, but got: %d", 55, fibonacci_recursive(10));
}

/* 测试 Fibonacci 迭代实现 */
Test(FibonacciSuite, test_fibonacci_iterative)
{
    cr_assert_eq(fibonacci_iterative(0), 0, "Expected: %d, but got: %d", 0, fibonacci_iterative(0));
    cr_assert_eq(fibonacci_iterative(1), 55, "Expected: %d, but got: %d", 55, fibonacci_iterative(1)); // 失败示例
    cr_assert_eq(fibonacci_iterative(2), 1, "Expected: %d, but got: %d", 1, fibonacci_iterative(2));
    cr_assert_eq(fibonacci_iterative(10), 55, "Expected: %d, but got: %d", 55, fibonacci_iterative(10));
}
